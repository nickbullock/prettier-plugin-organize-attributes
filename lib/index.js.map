{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAEA,sDAA8D;AAC9D,yCAAgF;AAChF,uCAAiD;AAEpC,QAAA,OAAO,GAAG;IACrB,IAAI,EAAE,UAAU,CAAC,qBAAW,CAAC,IAAI,CAAC;IAClC,GAAG,EAAE,UAAU,CAAC,qBAAW,CAAC,GAAG,CAAC;IAChC,OAAO,EAAE,UAAU,CAAC,qBAAW,CAAC,OAAO,CAAC;CACzC,CAAC;AAEW,QAAA,OAAO,GAEhB;IACF,eAAe,EAAE;QACf,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,QAAQ;QAClB,KAAK,EAAE,IAAI;QACX,WAAW,EAAE,2DAA2D;QACxE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;KACzB;IACD,aAAa,EAAE;QACb,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,QAAQ;QAClB,WAAW,EACT,oEAAoE;KACvE;CACF,CAAC;AAUF,SAAS,UAAU,CAAC,MAAmB;IACrC,uCACK,MAAM,KACT,KAAK,EAAE,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,IACvC;AACJ,CAAC;AAED,SAAS,kBAAkB,CAAC,KAA2B;IACrD,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAChC,iBAAiB,CACf,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,EAC7B,OAAwE,CACzE,CAAC;AACN,CAAC;AAED,SAAS,iBAAiB,CACxB,IAAc,EACd,OAAsE;IAEtE,MAAM,IAAI,GACR,OAAO,CAAC,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC;IACnE,MAAM,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;IAE5C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,QAAQ,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,EAAE;YAC/C,KAAK,SAAS;gBACZ,MAAM,CAAC,IAAI,CAAC,qBAAW,CAAC,QAAQ,CAAC,CAAC;gBAClC,MAAM;YACR,KAAK,KAAK;gBACR,MAAM,CAAC,IAAI,CAAC,qBAAW,CAAC,IAAI,CAAC,CAAC;gBAC9B,MAAM;YACR,KAAK,MAAM,CAAC;YACZ;gBACE,MAAM,CAAC,IAAI,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC;SAClC;KACF;IAED,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IAClC,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,aAAa,CACpB,IAAc,EACd,MAAgB,EAChB,IAAyB;;IAEzB,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,IAAI,CAAC,KAAK,GAAG,uBAAY,CAAC,IAAI,CAAC,KAAK,EAAE;YACpC,UAAU,EAAE,IAAI;YAChB,OAAO,EAAE,iBAAO;YAChB,MAAM;YACN,IAAI;YACJ,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI;SACxB,CAAC,CAAC,IAAI,CAAC;KACT;IAED,MAAA,IAAI,CAAC,QAAQ,0CAAE,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE;AACxE,CAAC","sourcesContent":["import * as posthtml from \"posthtml\";\nimport { FastPath, Parser, ParserOptions } from \"prettier\";\nimport { parsers as htmlParsers } from \"prettier/parser-html\";\nimport { miniorganize, OrganizeOptions, OrganizeOptionsSort } from \"./organize\";\nimport { PRESETS, PRESET_KEYS } from \"./presets\";\n\nexport const parsers = {\n  html: wrapParser(htmlParsers.html),\n  vue: wrapParser(htmlParsers.vue),\n  angular: wrapParser(htmlParsers.angular),\n};\n\nexport const options: {\n  [K in keyof PrettierPluginOrganizeAttributesParserOptions]: any;\n} = {\n  attributeGroups: {\n    type: \"string\",\n    category: \"Global\",\n    array: true,\n    description: \"Provide an order to organize HTML attributes into groups.\",\n    default: [{ value: [] }],\n  },\n  attributeSort: {\n    type: \"string\",\n    category: \"Global\",\n    description:\n      \"attributeSort HTML attribute grousp internally. ASC, DESC or NONE.\",\n  },\n};\n\ninterface HTMLNode {\n  children?: HTMLNode[];\n  attrMap?: { [key: string]: any };\n  attrs?: { name: string; value: any }[];\n  value?: string;\n  type: string;\n}\n\nfunction wrapParser(parser: Parser<any>): Parser<any> {\n  return {\n    ...parser,\n    parse: transformPostParse(parser.parse),\n  };\n}\n\nfunction transformPostParse(parse: Parser<any>[\"parse\"]): Parser<any>[\"parse\"] {\n  return (text, parsers, options) =>\n    transformRootNode(\n      parse(text, parsers, options),\n      options as ParserOptions & PrettierPluginOrganizeAttributesParserOptions\n    );\n}\n\nfunction transformRootNode(\n  node: HTMLNode,\n  options: ParserOptions & PrettierPluginOrganizeAttributesParserOptions\n) {\n  const sort: OrganizeOptionsSort =\n    options.attributeSort === \"NONE\" ? false : options.attributeSort;\n  const groups = [...options.attributeGroups];\n\n  if (groups.length === 0) {\n    switch (options.parser.toString().toLowerCase()) {\n      case \"angular\":\n        groups.push(PRESET_KEYS.$ANGULAR);\n        break;\n      case \"vue\":\n        groups.push(PRESET_KEYS.$VUE);\n        break;\n      case \"html\":\n      default:\n        groups.push(PRESET_KEYS.$HTML);\n    }\n  }\n\n  transformNode(node, groups, sort);\n  return node;\n}\n\nfunction transformNode(\n  node: HTMLNode,\n  groups: string[],\n  sort: OrganizeOptionsSort\n): void {\n  if (node.attrs) {\n    node.attrs = miniorganize(node.attrs, {\n      ignoreCase: true,\n      presets: PRESETS,\n      groups,\n      sort,\n      map: ({ name }) => name,\n    }).flat;\n  }\n\n  node.children?.forEach((child) => transformNode(child, groups, sort));\n}\n\nexport type PrettierPluginOrganizeAttributesParserOptions = {\n  attributeGroups: string[];\n  attributeSort: \"ASC\" | \"DESC\" | \"NONE\";\n};\n"]}